(function() {var implementors = {};
implementors["polars"] = [{"text":"impl&lt;'a&gt; From&lt;&amp;'a ChunkedArray&lt;Utf8Type&gt;&gt; for Vec&lt;Option&lt;&amp;'a str&gt;&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;Utf8Type&gt;&gt; for Vec&lt;Option&lt;String&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; From&lt;&amp;'a ChunkedArray&lt;BooleanType&gt;&gt; for Vec&lt;Option&lt;bool&gt;&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;ChunkedArray&lt;BooleanType&gt;&gt; for Vec&lt;Option&lt;bool&gt;&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; From&lt;&amp;'a ChunkedArray&lt;T&gt;&gt; for Vec&lt;Option&lt;T::Native&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType,<br>&nbsp;&nbsp;&nbsp;&nbsp;&amp;'a ChunkedArray&lt;T&gt;: IntoIterator&lt;Item = Option&lt;T::Native&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ChunkedArray&lt;T&gt;: ChunkOps,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl From&lt;ArrowError&gt; for PolarsError","synthetic":false,"types":[]},{"text":"impl From&lt;ParquetError&gt; for PolarsError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for PolarsError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for PolarsError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for PolarsError","synthetic":false,"types":[]},{"text":"impl From&lt;Error&gt; for PolarsError","synthetic":false,"types":[]},{"text":"impl From&lt;AggExpr&gt; for Expr","synthetic":false,"types":[]},{"text":"impl From&lt;u8&gt; for Operator","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; From&lt;ChunkedArray&lt;T&gt;&gt; for Series <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsDataType,<br>&nbsp;&nbsp;&nbsp;&nbsp;ChunkedArray&lt;T&gt;: IntoSeries,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()