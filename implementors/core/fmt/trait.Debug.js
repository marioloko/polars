(function() {var implementors = {};
implementors["polars"] = [{"text":"impl Debug for FillNoneStrategy","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for AlignedVec&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for BooleanParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for BooleanParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for BooleanParIterManyChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for BooleanParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for BooleanParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for BooleanParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ListParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ListParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ListParIterManyChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ListParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ListParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for ListParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug&gt; Debug for NumParIterSingleChunkReturnOption&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug&gt; Debug for NumParIterSingleChunkNullCheckReturnOption&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug&gt; Debug for NumParIterManyChunkReturnOption&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug&gt; Debug for NumParIterManyChunkNullCheckReturnOption&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug&gt; Debug for NumParIterSingleChunkReturnUnwrapped&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Debug&gt; Debug for NumParIterManyChunkReturnUnwrapped&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Utf8ParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Utf8ParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Utf8ParIterManyChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Utf8ParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Utf8ParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for Utf8ParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Debug&gt; Debug for ObjectArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Any + Debug + Clone + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Debug for AnyType&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Debug for PolarsError","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for ChunkedArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsPrimitiveType,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Utf8Chunked","synthetic":false,"types":[]},{"text":"impl Debug for ListChunked","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Debug for ObjectChunked&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'static + Debug + Clone + Send + Sync + Default,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Debug for Series","synthetic":false,"types":[]},{"text":"impl Debug for DataFrame","synthetic":false,"types":[]},{"text":"impl&lt;'df, 'selection_str&gt; Debug for GroupBy&lt;'df, 'selection_str&gt;","synthetic":false,"types":[]},{"text":"impl Debug for JoinType","synthetic":false,"types":[]},{"text":"impl Debug for dyn Udf","synthetic":false,"types":[]},{"text":"impl Debug for Expr","synthetic":false,"types":[]},{"text":"impl Debug for Operator","synthetic":false,"types":[]},{"text":"impl Debug for JoinOptions","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()