(function() {var implementors = {};
implementors["polars"] = [{"text":"impl Clone for InitFold","synthetic":false,"types":[]},{"text":"impl Clone for FillNoneStrategy","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BooleanParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BooleanParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BooleanParIterManyChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BooleanParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BooleanParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for BooleanParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ListParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ListParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ListParIterManyChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ListParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ListParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ListParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for NumParIterSingleChunkReturnOption&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for NumParIterSingleChunkNullCheckReturnOption&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for NumParIterManyChunkReturnOption&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for NumParIterManyChunkNullCheckReturnOption&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for NumParIterSingleChunkReturnUnwrapped&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for NumParIterManyChunkReturnUnwrapped&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: PolarsNumericType + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Utf8ParIterSingleChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Utf8ParIterSingleChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Utf8ParIterManyChunkReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Utf8ParIterManyChunkNullCheckReturnOption&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Utf8ParIterSingleChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Utf8ParIterManyChunkReturnUnwrapped&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for ObjectArray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Any + Debug + Clone + Send + Sync,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for ChunkedArray&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'df, 'selection_str&gt; Clone for GroupBy&lt;'df, 'selection_str&gt;","synthetic":false,"types":[]},{"text":"impl Clone for JoinType","synthetic":false,"types":[]},{"text":"impl Clone for CsvEncoding","synthetic":false,"types":[]},{"text":"impl Clone for DataFrame","synthetic":false,"types":[]},{"text":"impl Clone for AggExpr","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for Operator","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for LazyCsvReader&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for JoinOptions","synthetic":false,"types":[]},{"text":"impl Clone for LazyFrame","synthetic":false,"types":[]},{"text":"impl Clone for Series","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()